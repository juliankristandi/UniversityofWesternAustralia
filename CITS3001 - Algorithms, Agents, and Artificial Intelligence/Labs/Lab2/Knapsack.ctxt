#BlueJ class context
comment0.target=Knapsack
comment0.text=\n\ A\ class\ for\ representing\ implementations\ of\ the\ Knapsack\ problem.\n\ Created\ for\ CITS3001\ at\ the\ University\ of\ Western\ Australia.\n\ @author\ Tim\ French.\ \n
comment1.params=weights\ values\ capacity
comment1.target=int\ fractionalKnapsack(int[],\ int[],\ int)
comment1.text=\n\ Implements\ the\ fractional\ knapsack\ problem.\n\ The\ value\ returned\ should\ be\ the\ maximum\ \n\ value\ of\ a\ combination\ of\ products\ with\ the\ given\ value\ and\n\ weight\ that\ can\ fit\ ain\ a\ knapsack\ with\ the\ given\ capacity.\n\ The\ products\ are\ divisible\ so\ a\ fraction\ of\ each\ maybe\ taken.\n\ The\ returned\ value\ should\ be\ the\ greatest\ integer\ \n\ less\ than\ or\ equal\ to\ the\ maximum\ value.\n\ The\ arrays\ are\ assumed\ to\ be\ of\ equal\ size,\ and\ all\ non-negative\ values.\n\ @param\ weights\ the\ array\ of\ weights\ of\ each\ type\ of\ product\ available.\n\ @param\ values\ the\ array\ of\ values\ of\ each\ type\ of\ product\ available.\n\ @param\ capacity\ the\ size\ of\ the\ knapsack\n\ @return\ the\ greatest\ int\ less\ than\ or\ equal\ to\ the\ maximum\ possible\ value\ of\ the\ knapsack.\n
comment2.params=weights\ values\ capacity
comment2.target=int\ discreteKnapsack(int[],\ int[],\ int)
comment2.text=\n\ Implements\ the\ 0-1\ knapsack\ problem.\n\ The\ value\ returned\ should\ be\ the\ maximum\ \n\ value\ of\ a\ combination\ of\ products\ with\ the\ given\ value\ and\ \n\ weight\ that\ can\ fit\ ain\ a\ knapsack\ with\ the\ given\ capacity.\n\ The\ products\ are\ not\ divisible\ so\ each\ must\ be\ wholly\ included,\ \n\ or\ entirely\ left\ out.\n\ The\ returned\ value\ should\ be\ the\ maximum\ value\ it\ is\ possible\ \n\ to\ include\ in\ the\ knapsack.\n\ The\ arrays\ are\ assumed\ to\ be\ of\ equal\ size,\ and\ all\ non-negative\ values.\ \n\ @param\ weights\ the\ array\ of\ weights\ of\ each\ type\ of\ product\ available.\n\ @param\ values\ the\ array\ of\ values\ of\ each\ type\ of\ product\ available.\n\ @param\ capacity\ the\ size\ of\ the\ knapsack\n\ @return\ the\ maximum\ possible\ value\ of\ the\ knapsack.\n
numComments=3
